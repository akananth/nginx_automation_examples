name: Apply NGINXaaS WAF Deployment with Grafana

on:
  push:
    branches: [nginxaas-apply]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Deploy NGINXaaS WAF & Grafana'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_resource_group_name: ${{ vars.resource_group_name }}
          TF_VAR_azure_region: ${{ vars.azure_region }}
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_jwt: ${{ secrets.NGINX_JWT }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          # Pass your emails here if you want from secrets or vars:
          # TF_VAR_grafana_viewer_emails: '["your.email@domain.com"]'

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_resource_group_name: ${{ vars.resource_group_name }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region }}
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_jwt: ${{ secrets.NGINX_JWT }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          # TF_VAR_grafana_viewer_emails: '["your.email@domain.com"]'

      - name: Extract Terraform Outputs
        id: outputs
        run: |
          grafana_name=$(terraform output -raw grafana_name | tr -d '\r\n')
          resource_group_name=$(terraform output -raw resource_group_name | tr -d '\r\n')
          grafana_url=$(terraform output -raw grafana_url | tr -d '\r\n')
          echo "grafana_name=$grafana_name" >> $GITHUB_OUTPUT
          echo "resource_group_name=$resource_group_name" >> $GITHUB_OUTPUT
          echo "grafana_url=$grafana_url" >> $GITHUB_OUTPUT

  grafana:
    name: 'Configure Grafana'
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade Azure CLI and AMG extension
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az extension remove --name amg || true
          az extension add --name amg --yes
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: Enable Grafana Service Account
        run: |
          az grafana update \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}" \
            --service-account Enabled

      - name: Create Service Account
        run: |
          az grafana service-account create \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}" \
            --service-account tf-sa \
            --role Admin \
            --display-name "Terraform Service Account"

      - name: Create Service Account Token
        run: |
          TOKEN=$(az grafana service-account token create \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}" \
            --service-account tf-sa \
            --token tf-token \
            --time-to-live 8760h \
            --query token -o tsv)
          echo "::add-mask::$TOKEN"
          echo "GRAFANA_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Import Grafana Dashboard
        run: |
          az grafana dashboard import \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}" \
            --definition "@./azure/nginxaas/n4-dashboard.json" \
            --token "$GRAFANA_TOKEN"

      - name: Verify Grafana Access
        run: |
          echo "Grafana URL: ${{ needs.terraform.outputs.grafana_url }}"
          echo "Try accessing Grafana with your Azure AD credentials"
