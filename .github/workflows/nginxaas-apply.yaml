name: 'Apply NGINXaaS WAF Deployment with Grafana'

on:
  push:
    branches: [nginxaas-apply]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Deploy NGINXaaS WAF & Grafana'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    outputs:
      grafana_name: ${{ steps.outputs.grafana_name }}
      resource_group_name: ${{ steps.outputs.resource_group_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Validate
        run: terraform validate

      - name: Set Azure Region
        id: set-region
        run: |
          REGION="${{ vars.azure_region }}"
          if [ -z "$REGION" ]; then REGION="eastus2"; fi
          echo "region=$REGION" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        env:
          TF_VAR_grafana_user_object_id: ${{ secrets.GRAFANA_USER_OBJECT_ID }}
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_resource_group_name: ${{ vars.resource_group_name }}
          TF_VAR_azure_region: ${{ steps.set-region.outputs.region }}
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_jwt: ${{ secrets.NGINX_JWT }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve
        env:
          TF_VAR_grafana_user_object_id: ${{ secrets.GRAFANA_USER_OBJECT_ID }}
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_resource_group_name: ${{ vars.resource_group_name }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ steps.set-region.outputs.region }}
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_jwt: ${{ secrets.NGINX_JWT }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}

      - name: Extract Terraform Outputs
        id: outputs
        run: |
          grafana_name=$(terraform output -raw grafana_name | tr -d '\r\n')
          resource_group_name=$(terraform output -raw resource_group_name | tr -d '\r\n')
          echo "grafana_name=$grafana_name" >> $GITHUB_OUTPUT
          echo "resource_group_name=$resource_group_name" >> $GITHUB_OUTPUT

  grafana:
    name: 'Configure Grafana'
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade Azure CLI and AMG extension
        run: |
          echo "Upgrading Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          echo "Removing old AMG extension (if any)..."
          az extension remove --name amg || true
          echo "Adding latest AMG extension..."
          az extension add --name amg
          echo "Enabling preview extension installs..."
          az config set extension.dynamic_install=yes_without_prompt
          az config set extension.dynamic_install_allow_preview=true
          echo "Verify versions"
          az version
          az extension list
          
      - name: Enable Grafana Service Account
        run: |
          az grafana update \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}" \
            --service-account Enabled

      - name: Create Service Account
        run: |
          az grafana service-account create \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --service-account tf-sa \
            --role Admin \       # <-- Use Admin role here for full permissions
            --resource-group "${{ needs.terraform.outputs.resource_group_name }}"

      - name: Create Service Account Token
        run: |
          az grafana service-account token create \
            --name "${{ needs.terraform.outputs.grafana_name }}" \
            --service-account tf-sa \
            --token tf-token \
            --query token -o tsv > token.txt

      - name: Import Grafana Dashboard
        run: |
          GRAFANA_NAME="${{ needs.terraform.outputs.grafana_name }}"
          RG="${{ needs.terraform.outputs.resource_group_name }}"
          TOKEN=$(cat token.txt)
          az grafana dashboard import \
            --name "$GRAFANA_NAME" \
            --resource-group "$RG" \
            --definition "@./azure/nginxaas/n4-dashboard.json" \
            --token "$TOKEN"
