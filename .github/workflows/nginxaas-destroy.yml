name: 'NGINXaaS WAF Destroy'

on:
  push:
    branches:
      - nginxaas-destroy

jobs:
  terraform-destroy:
    name: 'Destroy NGINXaaS-WAF Resources'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Plan & Destroy (Best Effort)
        run: |
          echo "🔄 Running terraform destroy..."
          terraform plan -destroy -out=tfplan
          terraform apply -auto-approve tfplan || echo "::warning::Terraform destroy failed. Proceeding with manual cleanup."
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region }}
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_jwt: ${{ secrets.NGINX_JWT }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}

      - name: Cleanup Diagnostic Settings and Grafana
        run: |
          RG_NAME="${{ vars.project_prefix }}-rg"
          SUBSCRIPTION_ID="${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}"

          # NGINX resource ID - adjust if different
          NGINX_RESOURCE_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME/providers/Nginx.NginxPlus/nginxDeployments/akash-deploy"
          GRAFANA_RESOURCE_ID=$(az grafana list --resource-group $RG_NAME --query "[0].id" -o tsv)

          echo "🔍 Deleting NGINX Diagnostic Settings..."
          DIAG_SETTINGS=$(az monitor diagnostic-settings list --resource $NGINX_RESOURCE_ID --query "[].name" -o tsv)
          for setting in $DIAG_SETTINGS; do
            echo "Deleting diagnostic setting $setting..."
            az monitor diagnostic-settings delete --name "$setting" --resource $NGINX_RESOURCE_ID || echo "Failed to delete diagnostic setting $setting, continuing..."
          done

          if [ -n "$GRAFANA_RESOURCE_ID" ]; then
            echo "🔍 Deleting Grafana resource $GRAFANA_RESOURCE_ID..."
            az resource delete --ids $GRAFANA_RESOURCE_ID || echo "Failed to delete Grafana resource, continuing..."
          else
            echo "No Grafana resource found to delete."
          fi

      - name: Delete Resource Group (Wait)
        run: |
          RG_NAME="${{ vars.project_prefix }}-rg"
          echo "Deleting resource group $RG_NAME..."
          az group delete --name $RG_NAME --yes
          echo "Waiting for resource group deletion to complete..."
          for i in {1..60}; do
            sleep 10
            if ! az group exists --name $RG_NAME | grep -q true; then
              echo "✅ Resource group $RG_NAME successfully deleted."
              exit 0
            fi
            echo "⌛ Still deleting resource group... ($i/60)"
          done
          echo "::error::Resource group $RG_NAME still exists after waiting."
          exit 1

      - name: Unregister NGINX Resource Provider (Only after resources deleted)
        run: |
          echo "Checking NGINX.NGINXPLUS provider registration state..."
          STATE=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "NotFound")
          if [[ "$STATE" == "Registered" ]]; then
            echo "Unregistering NGINX.NGINXPLUS provider..."
            az provider unregister --namespace NGINX.NGINXPLUS --wait || echo "Provider unregister failed or timed out."
          else
            echo "NGINX provider already unregistered or not found."
          fi
