name: 'NGINXaaS WAF Destroy'

on:
  push:
    branches:
      - nginxaas-destroy

jobs:
  terraform-destroy:
    name: 'Destroy NGINXaaS WAF Resources'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Destroy (Best Effort)
        run: |
          echo "🔄 Running terraform destroy..."
          terraform destroy -auto-approve -input=false || echo "::warning::Terraform destroy failed. Proceeding with cleanup."
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region || 'eastus2' }}
          TF_VAR_resource_group_name: ${{ vars.project_prefix }}-rg
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          TF_VAR_nginx_jwt: ${{ secrets.nginx_jwt }}
          TF_VAR_principal_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

      - name: Force Delete Resource Group If Needed
        if: always()
        run: |
          RG_NAME="${{ vars.project_prefix }}-rg"

          echo "🔍 Checking if resource group $RG_NAME exists..."
          if az group exists --name "$RG_NAME" | grep -q true; then
            echo "🔎 Listing remaining resources in $RG_NAME..."
            RESOURCES=$(az resource list --resource-group "$RG_NAME" --query "[].name" -o tsv)

            if [[ -n "$RESOURCES" ]]; then
              echo "::warning::Resource group $RG_NAME is not empty. Force deleting..."
              echo "$RESOURCES"
              az group delete --name "$RG_NAME" --yes --no-wait
            else
              echo "✅ Resource group is already empty. Deleting group..."
              az group delete --name "$RG_NAME" --yes --no-wait
            fi
          else
            echo "✅ Resource group $RG_NAME does not exist. Nothing to delete."
          fi

      - name: Wait for Resource Group to be Deleted
        if: always()
        run: |
          RG_NAME="${{ vars.project_prefix }}-rg"
          echo "⏳ Waiting for resource group $RG_NAME to be deleted..."

          for i in {1..18}; do
            sleep 10
            if ! az group exists --name "$RG_NAME" | grep -q true; then
              echo "✅ Resource group $RG_NAME successfully deleted."
              exit 0
            fi
            echo "⌛ Still deleting... ($i/18)"
          done

          echo "::error::Resource group $RG_NAME still exists after waiting."
          exit 1

      - name: Unregister NGINX Resource Provider
        if: always()
        run: |
          echo "📦 Checking registration of NGINX.NGINXPLUS..."
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")

          if [[ "$state" == "Registered" ]]; then
            echo "📤 Unregistering NGINX.NGINXPLUS..."
            az provider unregister --namespace NGINX.NGINXPLUS --wait || true
          else
            echo "✅ NGINX provider already unregistered or not found."
          fi

      - name: Final Cleanup Verification
        if: always()
        run: |
          echo "🔁 Verifying cleanup..."
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")

          if [[ "$state" == "Registered" || "$state" == "Unregistering" ]]; then
            echo "::error::NGINX provider is still registered or in the process of unregistering."
            exit 1
          fi

          echo "✅ Final verification complete. All resources cleaned up."
