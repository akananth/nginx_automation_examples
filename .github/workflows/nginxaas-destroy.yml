name: 'Terraform Destroy'

on:
  push:
    branches: nginxaas-destroy

jobs:
  terraform:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: az account set --subscription ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}  # ADD THIS
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region || 'eastus2' }}  # FIXED REGION
          TF_VAR_resource_group_name: ${{ vars.project_prefix }}-rg
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          TF_VAR_nginx_jwt: ${{ secrets.nginx_jwt }}
          TF_VAR_principal_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

      
      - name: Force Delete Resource Group
        if: failure()  # Only run if destroy fails
        run: |
          az group delete --name ${{ vars.project_prefix }}-rg --yes --no-wait
          echo "Resource group deletion initiated"

      - name: Unregister NGINX Provider
        if: failure()  # Only run if destroy fails
        run: |
          # Check if provider is registered
          if az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv | grep -q "Registered"; then
            echo "Unregistering NGINX provider..."
            az provider unregister --namespace NGINX.NGINXPLUS
            
            # Wait for unregistration to complete
            while az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv | grep -q "Unregistering"; do
              sleep 10
              echo "Waiting for provider unregistration..."
            done
            echo "NGINX provider unregistered"
          else
            echo "NGINX provider not registered"
          fi

      - name: Verify Cleanup
        run: |
          echo "Verifying resource cleanup..."
          
          # Check resource group
          if az group exists --name ${{ vars.project_prefix }}-rg; then
            echo "::error::Resource group still exists!"
            exit 1
          fi
          
          # Check NGINX provider registration
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")
          if [[ "$state" == "Registered" || "$state" == "Unregistering" ]]; then
            echo "::error::NGINX provider still registered or unregistering!"
            exit 1
          fi
          
          echo "All resources cleaned up successfully"