name: 'Terraform Destroy'

on:
  push:
    branches: 
      - nginxaas-destroy

jobs:
  terraform:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region || 'eastus2' }}
          TF_VAR_resource_group_name: ${{ vars.project_prefix }}-rg
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          TF_VAR_nginx_jwt: ${{ secrets.nginx_jwt }}
          TF_VAR_principal_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

      - name: Force Delete Resource Group
        if: always()
        run: |
          echo "Force deleting resource group..."
          az group delete --name ${{ vars.project_prefix }}-rg --yes --no-wait
          echo "Resource group deletion initiated"

      - name: Unregister NGINX Provider
        if: always()
        run: |
          echo "Checking NGINX provider state..."
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")
          echo "Current state: $state"
          
          if [[ "$state" == "Registered" || "$state" == "Registering" || "$state" == "Unregistering" ]]; then
            echo "Unregistering NGINX provider..."
            az provider unregister --namespace NGINX.NGINXPLUS --wait
            
            # Wait for unregistration to complete
            for i in {1..10}; do
              current_state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")
              echo "Current state: $current_state"
              
              if [[ "$current_state" == "NotRegistered" ]]; then
                echo "NGINX provider unregistered successfully"
                break
              fi
              
              echo "Waiting... ($i/10)"
              sleep 30
            done
          else
            echo "NGINX provider state: $state - no action needed"
          fi

      - name: Verify Cleanup
        run: |
          echo "Verifying resource cleanup..."
          
          if ! az group exists --name ${{ vars.project_prefix }}-rg; then
            echo "Resource group deleted successfully"
          else
            echo "Resource group still exists, waiting 30 seconds before final check..."
            sleep 30
            if ! az group exists --name ${{ vars.project_prefix }}-rg; then
              echo "Resource group deleted successfully after wait"
            else
              echo "::error::Resource group still exists after waiting 30 seconds!"
              exit 1
            fi
          fi
          
          # Check NGINX provider registration once
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")
          if [[ "$state" == "Registered" || "$state" == "Unregistering" ]]; then
            echo "::error::NGINX provider still registered or unregistering!"
            exit 1
          else
            echo "NGINX provider state: $state"
          fi
          
          echo "All resources cleaned up successfully"
