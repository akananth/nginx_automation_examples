name: 'NGINXaaS WAF Destroy'

on:
  push:
    branches: 
      - nginxaas-destroy

jobs:
  terraform:
    name: 'NGINXaaS-WAF Destroy'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./azure/nginxaas

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_admin_ip: ${{ secrets.ADMIN_IP }}
          TF_VAR_project_prefix: ${{ vars.project_prefix }}
          TF_VAR_azure_region: ${{ vars.azure_region || 'eastus2' }}
          TF_VAR_resource_group_name: ${{ vars.project_prefix }}-rg
          TF_VAR_storage_account_name: ${{ vars.storage_account_name }}
          TF_VAR_ssh_public_key: ${{ secrets.ssh_public_key }}
          TF_VAR_nginx_plus_cert: ${{ secrets.nginx_plus_cert }}
          TF_VAR_nginx_plus_key: ${{ secrets.nginx_plus_key }}
          TF_VAR_nginx_jwt: ${{ secrets.nginx_jwt }}
          TF_VAR_principal_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

      - name: Delete Resource Group Cleanly
        if: always()
        run: |
          RG_NAME="${{ vars.project_prefix }}-rg"

          echo "Checking if resource group $RG_NAME exists..."
          exists=$(az group exists --name "$RG_NAME")

          if [[ "$exists" == "true" ]]; then
            echo "Checking if resource group is empty..."
            resources=$(az resource list --resource-group "$RG_NAME" --query "[].name" -o tsv)

            if [[ -z "$resources" ]]; then
              echo "Resource group is empty. Deleting..."
              az group delete --name "$RG_NAME" --yes --no-wait

              echo "Waiting for resource group to be deleted..."
              for i in {1..12}; do
                sleep 10
                exists=$(az group exists --name "$RG_NAME")
                if [[ "$exists" == "false" ]]; then
                  echo "✅ Resource group deleted."
                  exit 0
                fi
                echo "Still exists... ($i/12)."
              done

              echo "::error::Resource group still exists after waiting."
              exit 1
            else
              echo "::error::Resource group $RG_NAME is not empty. Resources still exist:"
              echo "$resources"
              exit 1
            fi
          else
            echo "Resource group $RG_NAME already deleted."
          fi

      - name: Unregister NGINX Provider
        if: always()
        run: |
          echo "Checking NGINX provider registration state..."
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")

          if [[ "$state" == "Registered" ]]; then
            echo "Unregistering NGINX provider now that all resources are gone..."
            az provider unregister --namespace NGINX.NGINXPLUS --wait || true
          else
            echo "NGINX provider already unregistered or not found. Skipping."
          fi

      - name: Final Verification
        run: |
          echo "Verifying final cleanup..."
          state=$(az provider show --namespace NGINX.NGINXPLUS --query registrationState -o tsv 2>/dev/null || echo "Not Found")

          if [[ "$state" == "Registered" || "$state" == "Unregistering" ]]; then
            echo "::error::NGINX provider is still registered or unregistering."
            exit 1
          fi

          echo "✅ Cleanup verified. NGINX provider is unregistered."
